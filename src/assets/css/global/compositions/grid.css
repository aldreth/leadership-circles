/* AUTO GRID
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with
configurable grid item sizes

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */

:where(.grid) {
  display: grid;
  grid-template-columns: repeat(
    var(--grid-placement, auto-fill),
    minmax(var(--grid-min-item-size, 16rem), 1fr)
  );
  gap: var(--gutter, var(--space-s-m));
}

:where(.grid)[data-rows='masonry'] {
  grid-template-rows: masonry;
  align-items: start;
}

:where(.grid)[data-layout='50-50'] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 50vw, 28rem);
}

:where(.grid)[data-layout='1-2'],
:where(.grid)[data-layout='2-1'] {
  max-inline-size: 65ch;
  grid-auto-flow: row;
  grid-template-columns: auto;

  img {
    object-fit: cover;
    width: 100%;
    max-height: 100%;
    margin-block-start: 0;
  }
}

@media screen(navigation) {
  :where(.grid)[data-layout='1-2'] {
    grid-template-columns: 1fr 2fr;
  }

  :where(.grid)[data-layout='2-1'] {
    grid-template-columns: 2fr 1fr;
  }
}

:where(.flex) {
  display: flex;
  flex-direction: column;
  gap: var(--gutter, var(--space-s-m));
  max-inline-size: 65ch;

  img {
    object-fit: cover;
    width: 100%;
    max-height: 100%;
    margin-block-start: 0;
  }
}

@media screen(navigation) {
  :where(.flex) {
    div {
      flex: 2;
    }

    picture {
      flex: 1;
    }
  }

  :where(.flex)[data-layout='image-text'] {
    flex-direction: row-reverse;
  }

  :where(.flex)[data-layout='text-image'] {
    flex-direction: row;
  }
}
